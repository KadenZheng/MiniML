(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env 
           
    (* the type of values (including closures) stored in
       environments *)
    and value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list

    and value =
      | Val of expr
      | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      match List.assoc_opt varname env with
      | None -> raise (EvalError "variable not found")
      | Some x -> !x
    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: (List.remove_assoc varname env)

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val exp -> exp_to_abstract_string exp
      | Closure (exp, env) ->
          if printenvp then
            "{ " ^ exp_to_abstract_string exp ^ ", " ^
            env_to_string env ^ " }"
          else
            "{ " ^ exp_to_abstract_string exp ^ " }"

    and env_to_string (env : env) : string =
      match env with
      | [] -> ""
      | (varname, value_ref) :: rest ->
          "[" ^ varname ^ " â†¦ " ^ (value_to_string ~printenvp:false 
          !value_ref) ^ ")" ^ 
          (if rest = [] then "]" else "; " ^ env_to_string rest)
  end
;;
  
open Env ;;
(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> env -> value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : env) : value =
  (* coerce the expr, unchanged, into a value *)
  Val exp ;;

(* ======== helper functions ======= *)

(* returns the integer stored in a Num expression *)
let value_to_int (e: value) : int =
  match e with
  | Val (Num n) -> n
  | _ -> raise (EvalError "Not an integer")

(* returns the truth value stored in a Bool expression *)
let value_to_bool (e: value) : bool =
  match e with
  | Val (Bool b) -> b
  | _ -> raise (EvalError "Not a boolean")

(* evaluates a unary operator *)
let eval_unop (op: unop) (e: value) : value =
  match (op, e) with
  | (Negate, Val (Num n)) -> Val (Num (-n))
  (* Added support for negating floats *)
  | (Negate, Val (Float f)) -> Val (Float (-.f))
  | _ -> raise (EvalError "Invalid unary operator")

(* evaluates a binary operator *)
let eval_binop (op: binop) (e1: value) (e2: value) : value =
  match (op, e1, e2) with
  | (Plus, Val (Num n1), Val (Num n2)) -> Val (Num (n1 + n2))
  | (Minus, Val (Num n1), Val (Num n2)) -> Val (Num (n1 - n2))
  | (Times, Val (Num n1), Val (Num n2)) -> Val (Num (n1 * n2))
  | (Equals, Val (Num n1), Val (Num n2)) -> Val (Bool (n1 = n2))
  | (LessThan, Val (Num n1), Val (Num n2)) -> Val (Bool (n1 < n2))
  (* Support for floats, strongly typed (both args have to be of same type) *)
  | (FPlus, Val (Float f1), Val (Float f2)) -> Val (Float (f1 +. f2))
  | (FMinus, Val (Float f1), Val (Float f2)) -> Val (Float (f1 -. f2))
  | (FTimes, Val (Float f1), Val (Float f2)) -> Val (Float (f1 *. f2))
  | (FDivide, Val (Float f1), Val (Float f2)) ->
      if f2 = 0.0 then raise (EvalError "float: division by zero")
      else Val (Float (f1 /. f2))
  | (Equals, Val (Float f1), Val (Float f2)) -> Val (Bool (f1 = f2))
  | (LessThan, Val (Float f1), Val (Float f2)) -> Val (Bool (f1 < f2))
  (* Support for strings *)
  | (Plus, Val (String s1), Val (String s2)) -> Val (String (s1 ^ s2))
  | (Equals, Val (String s1), Val (String s2)) -> Val (Bool (s1 = s2))
  | (LessThan, Val (String s1), Val (String s2)) -> Val (Bool (compare s1 s2 < 0))
  | _ -> raise (EvalError "eval_binop: invalid binary operator")
    ;;

let extract_expr (v : value) : expr =
  match v with
  | Val a -> a
  | _ -> failwith "extract_expr only operates on Val"

(* ADT for passing into eval_generator which model *)
type evaluator = 
  | Substitution
  | Dynamic
  | Lexical

(* !Function that abstracts process of generating semantic models *)
(* Takes in which model type as arg *)
let rec eval_generator (model : evaluator) (exp : expr) (env : env) : value =
  let rec eval_aux (exp : expr) : value =
    match exp with
    | Num n -> Val (Num n)
    | Bool b -> Val (Bool b)
    | Float f -> Val (Float f)
    | Raise -> raise EvalException
    | String s -> Val (String s)
    | Unassigned -> raise (EvalError "unassigned: unassigned value")
    | Var v ->
      (match model with
      (* Substitution model doesn't have environment *)
       | Substitution -> raise (EvalError ("var: unbound variable " ^ v)) 
        (* Dynamic/Lexical models use environment for variable lookup *)
       | Dynamic | Lexical -> lookup env v)
    | Unop (op, e) -> eval_unop op (eval_aux e)
    | Binop (op, e1, e2) -> eval_binop op (eval_aux e1) (eval_aux e2)
    | Conditional (e1, e2, e3) ->
      (match eval_aux e1 with
       | Val (Bool b) -> if b then eval_aux e2 else eval_aux e3
       | _ -> raise (EvalError "conditional: invalid conditional"))
    | Fun (v, e) ->
      (match model with
      (* Lexical creates a closure to capture current environment *)
       | Lexical -> close (Fun (v, e)) env 
       (* Substitution/Dynamic models treat functions as values *)
       | _ -> Val (Fun (v, e))) 
    | Let (v, e1, e2) ->
      (match model with
      (* Performing plain substitution *)
       | Substitution -> eval_generator model (subst v (extract_expr (eval_aux e1)) e2) env 
       | Dynamic | Lexical ->
         let e1_val = eval_aux e1 in
         let new_env = extend env v (ref e1_val) in
         (* Dynamic/Lexical models extend the environment *)
         eval_generator model e2 new_env) 
    | Letrec (v, e1, e2) ->
      (match model with
      (* Performing substitution for recursive bindings *)
       | Substitution ->
         let vd = extract_expr (eval_aux e1) in
         eval_generator model (subst v (subst v (Letrec (v, vd, Var v)) vd) e2) env
       | Dynamic ->
         let r = ref (Val Unassigned) in
         let new_env = extend env v r in
         (* Update r w/ result of evaluating recursive binding e1 in new_env *)
         r := eval_generator model e1 new_env;
         (* Evaluate body e2 in updated env *)
         eval_generator model e2 new_env
       | Lexical -> 
        (* informed by steps from readme *)
         let r = ref (Val Unassigned) in
         let new_env = extend env v r in (* to extend env w/ binding 'v' to 'r'*)
         let vs = eval_generator model e1 new_env in
         (* check if result of evaluating e1 is unbound var *)
         (match vs with
          | Val (Var _) -> raise (EvalError "letrec: unbound variable")
          | _ -> r := vs; eval_generator model e2 new_env))
    | App (e1, e2) ->
      (match model with
       | Substitution ->
         (match eval_aux e1 with
          | Val (Fun (v, e)) -> eval_generator model (subst v (extract_expr (eval_aux e2)) e) env
          | _ -> raise (EvalError "app: invalid function application"))
       | Dynamic -> 
        (* Dynamic extends the environment w the function argument *)
         let e1_val = eval_aux e1 in
         let e2_val = eval_aux e2 in
         (match e1_val with
          | Val (Fun (v, e)) ->
            let new_env = extend env v (ref e2_val) in
            eval_generator model e new_env
          | _ -> raise (EvalError "app: invalid function application"))
       | Lexical ->
        (* Lexical applies the function using the closure environment *)
         let e1_val = eval_aux e1 in
         let e2_val = eval_aux e2 in
         (match e1_val with
          | Closure (Fun (v, e), c_env) ->
            let new_env = extend c_env v (ref e2_val) in
            eval_generator model e new_env
          | _ -> raise (EvalError "app: invalid function application")))
  in
  eval_aux exp
;;

(* The SUBSTITUTION MODEL evaluator *)
let eval_s = eval_generator Substitution 

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator *)
let eval_d = eval_generator Dynamic 

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
let eval_l = eval_generator Lexical 

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  eval_l ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_l ;;
